@page "/confirmation"
@using System.Security.Claims;
@using WebShop.Client.ClientModels;

@rendermode InteractiveWebAssembly

@inject HttpClient HttpClient
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider StateProvider
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

<h3>Confirmation</h3>
<div>
    @foreach (var product in ShoppingList)
    {
        <table class="table">
            <thead>
                <tr>
                  <th>#</th>
                <th>Picture</th>
                <th>Name</th>
                <th>Description</th>
                <th>Quantity</th>
                <th>Price/item</th>
                </tr>
            </thead>

            <tbody>
                <tr>
                    <td>@(ShoppingList.IndexOf(product) + 1)</td
                    <td><img src="@product.Products.Url" width="180px" /></td>
                    <td>@product.Products.Name</td>
                    <td>@product.Products.Description</td>
                    <td>@product.Quantity</td>
                    <td>@(product.Products.Price*product.Quantity)</td>
                </tr>
            </tbody>
        </table>
    }
 </div>
 <button>Hello!</button>

@code {

    AuthenticationState authenticationState;
    List<ClientCartItems> ShoppingList;

    //List<ClientCartItem> ShoppingList = new();'
    protected override async Task OnInitializedAsync()
    {
        OnAfterRenderAsync(true);
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            authenticationState = await StateProvider.GetAuthenticationStateAsync();
            var userId = authenticationState
            .User
            .Claims
            .Where(c => c.Type == ClaimTypes.NameIdentifier)
            .First()
            .Value;

            ShoppingList = await sessionStorage.GetItemAsync<List<ClientCartItems>>(userId);

            StateHasChanged();
        }
    }
}
