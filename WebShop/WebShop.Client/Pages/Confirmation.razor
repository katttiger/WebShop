@page "/confirmation"
@using System.Security.Claims;
@using WebShop.Client.ClientModels;

@rendermode InteractiveWebAssembly

@inject HttpClient HttpClient
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider StateProvider
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject NavigationManager navigaitonManager

<h3>Confirmation</h3>
@if (purchaseConfirmed)
{
    <h2>Thank you for purchasing!</h2>
}
else
{
<div>
    @foreach (var product in ShoppingList)
    {
        <table class="table">
            <thead>
                <tr>
                  <th>#</th>
                <th>Picture</th>
                <th>Name</th>
                <th>Description</th>
                <th>Quantity</th>
                <th>Price/item</th>
                </tr>
            </thead>

            <tbody>
                <tr>
                    <td>@(ShoppingList.IndexOf(product) + 1)</td
                    <td><img src="@product.Url" width="180px" /></td>
                    <td>@product.Name</td>
                    <td>@product.Description</td>
                    <td>@product.QuantityBought</td>
                    <td>@(product.Price*product.QuantityBought)</td>
                </tr>
            </tbody>
        </table>
    }
 </div>
 <form class="form-control">
        <input class="form-control" type="text" placeholder="Name" disabled @bind="userName" />
        <input class="form-control" type="text" placeholder="Email"  disabled @bind="email"/>
    </form>
    <input type="submit" @onclick="OnConfirmation" value="Submit" />
    
}
<footer class="color-dark"></footer>

@code {
    AuthenticationState authenticationState;
    List<ClientCartItems> ShoppingList=new();
    bool purchaseConfirmed = false;
    string userName = string.Empty;
    string email = string.Empty;

    public async void OnConfirmation()
    {
        purchaseConfirmed = true;
        // await Task.Delay(700);
        navigationManager.NavigateTo("/oldconfirmation");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            authenticationState = await StateProvider.GetAuthenticationStateAsync();
            var userId = authenticationState
            .User
            .Claims
            .Where(c => c.Type == ClaimTypes.NameIdentifier)
            .First()
            .Value;

            ShoppingList = await sessionStorage.GetItemAsync<List<ClientCartItems>>(userId);
            var item = ShoppingList[0];
            userName = item.UserName;
            email = item.Email;

            if(ShoppingList is not null)
                StateHasChanged();
        }
    }
}
