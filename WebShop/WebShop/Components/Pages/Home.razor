@page "/"
@using WebShop.Data
@using WebShop.Common.Classes
@using Microsoft.AspNetCore.Authorization;
@using WebShop.Data.Models

@inject HttpClient HttpClient
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider StateProvider
@inject WebShopHandler wsh
@inject UserManager<ApplicationUser> userManager

@attribute [Authorize]
@rendermode InteractiveServer

<PageTitle>Home</PageTitle>
<WebshopHeader ShoppingListLength="@wsh.ShoppingCart.Count()"
               OnNavigationToCashier="GoToCheckout"></WebshopHeader>

<div>
    <nav stype="--bs-breadcrumb-divider:'>';" aria-label="breadcrumb">
        <ol class="breadcrumb">
            <li class="breadcrumb-item" <a href="#">Home</a></li>

        </ol>
    </nav>
</div>

@*Fix the exchangerate to that it works properly*@
<p>
    <b>TIP:</b>
    <i>
        Double-click on the DKK-button to show the original price.
    </i>
</p>

@*Note: can be turned into a component*@
<div class="btn-group-sm">
    <nav>
        <button class="btn btn-warning opacity-50" @onclick="()=>ExchangeAsync('E',currentCurrency)">&#8364;</button>
        <button class="btn btn-success opacity-50" @onclick="()=>ExchangeAsync('U', currentCurrency)">&#36;</button>
        <button class="btn btn-primary opacity-50" @onclick="()=>ExchangeAsync('D', currentCurrency)">DKK</button>
    </nav>
</div>

<div class="d-flex flex-wrap justify-content-start">
    @foreach (var product in wsh.ProductList)
    {
        <ProductHomeCard Product="@product"
                         Exchangerate="Math.Round(exchangeRate,2)"
                         Currency="@currency"
                         OnShowProductSide="()=>ShowProductSide(product.Id)"
                         OnAddToCart="()=>AddToCart(product.Id)"></ProductHomeCard>
    }
</div>
<WebshopFooter></WebshopFooter>
@code {
    ApplicationUser? user;
    AuthenticationState authenticationState;

    public void AddToCart(int id) => wsh.AddToCart(id, user);
    public void GoToCheckout() => navigationManager.NavigateTo("/checkout");
    //Navigation
    public void ShowProductSide(int id)
    {
        wsh.GetProductsById(id);
        navigationManager.NavigateTo("/product/" + id);
    }

    public double exchangeRate = 1;
    public string currency = "DKK";
    char currentCurrency = 'D';

    public async Task ExchangeAsync(char toCurrencyInput, char fromCurrencyInput)
    {
        HttpClient.DefaultRequestHeaders.Clear();
        string fromCurrency = string.Empty;
        string toCurrency = string.Empty;

        //$=>DKK
        if (toCurrencyInput == 'D' && currentCurrency == 'U')
        {
            fromCurrency = "USD";
            toCurrency = "DKK";
            currency = "DKK";
            currentCurrency = 'D';
        }
        //E=>DKK
        else if (toCurrencyInput == 'D' && currentCurrency == 'E')
        {
            fromCurrency = "EUR";
            toCurrency = "DKK";
            currency = "DKK";
            currentCurrency = 'D';
        }
        //DKK=>€
        else if (toCurrencyInput == 'E' && currentCurrency == 'D')
        {
            fromCurrency = "DKK";
            toCurrency = "EUR";
            currency = "€";
            currentCurrency = 'E';
        }
        //$=>€
        else if (toCurrencyInput == 'E' && currentCurrency == 'U')
        {
            fromCurrency = "USD";
            toCurrency = "EUR";
            currency = "€";
            currentCurrency = 'E';
        }
        //€=>$
        else if (toCurrencyInput == 'U' && currentCurrency == 'E')
        {
            fromCurrency = "EUR";
            toCurrency = "USD";
            currency = "$";
            currentCurrency = 'U';
        }
        //DKK=>$
        else if (toCurrencyInput == 'U' && currentCurrency == 'D')
        {
            fromCurrency = "DKK";
            toCurrency = "USD";
            currency = "$";
            currentCurrency = 'U';
        }
        else
        {
            if (currentCurrency == 'D')
            {
                fromCurrency = "DKK";
                toCurrency = "DKK";
                currency = currency;
            }
            else if (currentCurrency == 'E')
            {
                fromCurrency = "EUR";
                toCurrency = "EUR";
                currency = currency;
            }
            else
            {
                fromCurrency = "USD";
                toCurrency = "USD";
                currency = currency;
            }
        }
        HttpClient.DefaultRequestHeaders.Add("X-Api-Key", "oSZAPBiQWuTEFVLaXLzrkQ==SCNxLNPoxMs72JLy");
        var response = await HttpClient.GetFromJsonAsync<ResponseType>($"https://api.api-ninjas.com/v1/exchangerate?pair={fromCurrency}_{toCurrency}");
        exchangeRate = response.exchange_rate;
        wsh.currency = currency;
        HttpClient.DefaultRequestHeaders.Clear();
    }

    protected override async Task OnInitializedAsync()
    {
        wsh.ProductList = wsh.GetAllProducts();
        if (wsh.ProductList.Count() < 5)
        {
            await wsh.Seed();
        }
        wsh.ProductList = wsh.GetAllProducts();
        authenticationState = await StateProvider.GetAuthenticationStateAsync();
        var stateUser = await userManager.GetUserAsync(authenticationState.User);
        if (stateUser is not null)
            user = await wsh.GetUserShopinglistInfo(stateUser);
        StateHasChanged();
    }
    public async Task UpdateUser()
    {
        wsh.applicationUser = user;
        await wsh.UpdateUser(user);
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        //Shoppingcart nollställs när vi loggar ut.
        if (firstRender)
        {
            authenticationState = await StateProvider.GetAuthenticationStateAsync();
            var stateUser = await userManager.GetUserAsync(authenticationState.User);
            if (stateUser is not null)
                user = await wsh.GetUserShopinglistInfo(stateUser);
            StateHasChanged();
        }
        StateHasChanged();
    }

}

