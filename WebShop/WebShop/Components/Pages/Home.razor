@page "/"
@using WebShop.Data
@using Microsoft.AspNetCore.Authorization;
@using WebShop.Data.Models

@inject NavigationManager navigationManager
@inject AuthenticationStateProvider StateProvider
@inject WebShopHandler wsh
@inject UserManager<ApplicationUser> userManager

@attribute [Authorize]
@rendermode InteractiveServer

<PageTitle>Home</PageTitle>
<WebshopHeader ShoppingListLength="@wsh.ShoppingCart.Count()"
               OnNavigationToCashier="GoToCheckout"></WebshopHeader>
@*Connect the buttons in the webshopheader to a navigationmethod that guides to the checkout.*@
<div>
    <nav stype="--bs-breadcrumb-divider:'>';" aria-label="breadcrumb">
        <ol class="breadcrumb">
            <li class="breadcrumb-item" <a href="#">Home</a></li>

        </ol>
    </nav>
</div>

<div class="d-flex flex-wrap justify-content-start">
    @foreach (var product in wsh.ProductList)
    {
        <ProductHomeCard Product="@product"
                         OnShowProductSide="()=>ShowProductSide(product.Id)"
                         OnAddToCart="()=>AddToCart(product.Id)"></ProductHomeCard>
    }
</div>

<WebshopFooter></WebshopFooter>
@code {
    //TODO: Computer remembers the shoppinglist when user logs in and out.
    //TODO: Apply curency API
    string errorMessage = string.Empty;
    bool error = false;
    ApplicationUser? user;
    AuthenticationState authenticationState;

    //Navigation
    public void ShowProductSide(int id)
    {
        wsh.GetProductsById(id);
        navigationManager.NavigateTo("/product/" + id);
    }

    public void GoToCheckout()
    {
        navigationManager.NavigateTo("/checkout");
    }

    //Bind AddToCartButton to method:
    public void AddToCart(int id) => wsh.AddToCart(id, user);


    protected override async Task OnInitializedAsync()
    {
        //await wsh.Seed();
        wsh.ProductList = wsh.GetAllProducts();

        // Vi hämtar ut det nuvarande autentiseringsStatet som innehåller information om användare som är inloggar
        authenticationState = await StateProvider.GetAuthenticationStateAsync();
        // Med hjälp av authenticationState.User kan vi hämta ut vår faktiskt ApplicationUser
        var stateUser = await userManager.GetUserAsync(authenticationState.User);
        // Den kan vi sen använda för att hämta relaterad data från databasen
        user = await wsh.GetUserShopinglistInfo(stateUser);
        wsh.applicationUser = user;
        StateHasChanged();
    }
    public async Task UpdateUser()
    {
        wsh.applicationUser = user;
        await wsh.UpdateUser(user);
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Vi hämtar ut det nuvarande autentiseringsStatet som innehåller information om användare som är inloggar
            authenticationState = await StateProvider.GetAuthenticationStateAsync();
            // Med hjälp av authenticationState.User kan vi hämta ut vår faktiskt ApplicationUser
            var stateUser = await userManager.GetUserAsync(authenticationState.User);
            // Den kan vi sen använda för att hämta relaterad data från databasen
            user = await wsh.GetUserShopinglistInfo(stateUser);
            wsh.applicationUser = user;
        }
        user = wsh.applicationUser;
        StateHasChanged();
    }
}

