@page "/checkout"
@using WebShop.Common;
@using WebShop.Data;

@inject WebShopHandler wsh;
@inject NavigationManager navigationManager
@inject HttpClient HttpClient
@inject AuthenticationStateProvider StateProvider;
@inject UserManager<ApplicationUser> userManager;

@rendermode InteractiveServer


<PageTitle>Checkout</PageTitle>
<WebshopHeader ShoppingListLength="wsh.ShoppingCart.Count()"></WebshopHeader>

<div>
    <nav stype="--bs-breadcrumb-divider:'>';" aria-label="breadcrumb">
        <ol class="breadcrumb">
            <li class="breadcrumb-item" <a href="#">Home</a></li>
        </ol>
    </nav>
</div>

<p><i>Double-click on the DKK-button to revert to the original price.</i></p>
<div class="btn-group-sm">
    <nav>
        <button class="btn btn-warning opacity-50" @onclick="()=>ExchangeAsync('E',currentCurrency)">&#8364;</button>
        <button class="btn btn-success opacity-50" @onclick="()=>ExchangeAsync('U', currentCurrency)">&#36;</button>
        <button class="btn btn-primary opacity-50" @onclick="()=>ExchangeAsync('D', currentCurrency)">DKK</button>
    </nav>
</div>
@foreach (var product in wsh.ShoppingCart)
{
    if (product.Product is not null)
    {
        <table class="table">
            <thead>
                <tr>
                    <th>#</th>
                    <th>Picture</th>
                    <th>Name</th>
                    <th>Description</th>
                    <th>Quantity</th>
                    <th>Price @wsh.currency</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>@(wsh.applicationUser.ShoppingCart.ShoppingList.IndexOf(product) + 1)</td>
                    <td><img src="@product.Product.Url" width="180px" /></td>
                    <td>@product.Product.Name</td>
                    <td>@product.Product.Description</td>
                    <td>@product.Quantity</td>
                    <td>@(Math.Round(product.Product.Price * exchangeRate,2)*product.Product.Quantity) @wsh.currency</td>
                </tr>
            </tbody>
        </table>
    }
}

@if (user is not null)
{
    <form class="form-control">
        <label class="form-label">Name</label>
        <input type="text" class="form-control" required @bind="@user.UserName" />

        <label class="form-label">E-mail</label>
        <input type="text" class="form-control" required @bind="@user.Email" />

        <input type="checkbox" class="form-check" required" /> Agree to terms and privacy policy
    </form>
    <input type="submit" @onclick="NavigateToConfirmation" value="Confirm" />
}

@code {
    public bool purchaseComplete = false;
    ApplicationUser? user;
    AuthenticationState authenticationState;

    public double exchangeRate = 1;
    public string currency = "DKK";
    char currentCurrency = 'D';

    public async Task ExchangeAsync(char toCurrencyInput, char fromCurrencyInput)
    {
        HttpClient.DefaultRequestHeaders.Clear();
        string fromCurrency = string.Empty;
        string toCurrency = string.Empty;

        //$=>DKK
        if (toCurrencyInput == 'D' && currentCurrency == 'U')
        {
            fromCurrency = "USD";
            toCurrency = "DKK";
            currency = "DKK";
        }
        //E=>DKK
        else if (toCurrencyInput == 'D' && currentCurrency == 'E')
        {
            fromCurrency = "EUR";
            toCurrency = "DKK";
            currency = "DKK";
        }
        //DKK=>€
        else if (toCurrencyInput == 'E' && currentCurrency == 'D')
        {
            fromCurrency = "DKK";
            toCurrency = "EUR";
            currency = "€";
        }
        //$=>€
        else if (toCurrencyInput == 'E' && currentCurrency == 'U')
        {
            fromCurrency = "USD";
            toCurrency = "EUR";
            currency = "€";
        }
        //€=>$
        else if (toCurrencyInput == 'U' && currentCurrency == 'E')
        {
            fromCurrency = "EUR";
            toCurrency = "USD";
            currency = "$";
        }
        //DKK=>$
        else if (toCurrencyInput == 'U' && currentCurrency == 'D')
        {
            fromCurrency = "DKK";
            toCurrency = "USD";
            currency = "$";
        }
        else
        {
            if (currentCurrency == 'D')
            {
                fromCurrency = "DKK";
                toCurrency = "DKK";
                currency = currency;
            }
            else if (currentCurrency == 'E')
            {
                fromCurrency = "EUR";
                toCurrency = "EUR";
                currency = currency;
            }
            else
            {
                fromCurrency = "USD";
                toCurrency = "USD";
                currency = currency;
            }
        }

        HttpClient.DefaultRequestHeaders.Clear();
        HttpClient.DefaultRequestHeaders.Add("X-Api-Key", "oSZAPBiQWuTEFVLaXLzrkQ==SCNxLNPoxMs72JLy");
        var response = await HttpClient.GetFromJsonAsync<ResponseType>($"https://api.api-ninjas.com/v1/exchangerate?pair={fromCurrency}_{toCurrency}");
        exchangeRate = response.exchange_rate;
        HttpClient.DefaultRequestHeaders.Clear();
    }


    public bool submited = false;
    public bool error = false;

    public int IncremeantCount(int number) => number++;

    public void NavigateToConfirmation() => navigationManager.NavigateTo("/confirmation");

    protected override async Task OnInitializedAsync()
    {
        authenticationState = await StateProvider.GetAuthenticationStateAsync();
        var stateUser = await userManager.GetUserAsync(authenticationState.User);
        if (stateUser is not null)
            user = await wsh.GetUserShopinglistInfo(stateUser);
        else
            navigationManager.NavigateTo("/");

        StateHasChanged();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            authenticationState = await StateProvider.GetAuthenticationStateAsync();
            var stateUser = await userManager.GetUserAsync(authenticationState.User);
            if (stateUser is not null)
            {
                user = await wsh.GetUserShopinglistInfo(stateUser);
            }
            else
            {
                navigationManager.NavigateTo("/");
            }
        }
        StateHasChanged();
    }
}
