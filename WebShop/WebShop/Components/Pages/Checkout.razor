@page "/checkout"
@using WebShop.Common;
@using WebShop.Data;
@using Microsoft.AspNetCore.Authorization;

@inject NavigationManager navigationManager
@inject AuthenticationStateProvider StateProvider;
@inject WebShopHandler wsh;
@inject UserManager<ApplicationUser> userManager;

@attribute [Authorize]
@rendermode InteractiveServer


<PageTitle>Checkout</PageTitle>
<WebshopHeader ShoppingListLength="@wsh.ShoppingCart.Count()"></WebshopHeader>
<div>
    <nav stype="--bs-breadcrumb-divider:'>';" aria-label="breadcrumb">
        <ol class="breadcrumb">
            <li class="breadcrumb-item" <a href="#">Home</a></li>
        </ol>
    </nav>
</div>

@foreach (var product in wsh.ShoppingCart)
{
    <table class="table">
        <thead>
            <tr>
                <th>#</th>
                <th>Picture</th>
                <th>Name</th>
                <th>Description</th>
                <th>Quantity</th>
                <th>Price</th>
            </tr>
        </thead>
        @*
    <tbody>
    <tr>
    <td>@(wsh.ShoppingCarts.IndexOf(product) + 1)</td>
    <td><img src="@product.Url" width="180px" /></td>
    <td>@product.Name</td>
    <td>@product.Description</td>
    <td>@product.Quantity</td>
    <td>@product.Price</td>
    </tr>
    </tbody> *@
    </table>
}

<form class="form-control">
    @*TODO: If user exist, print adress and name automatically*@
    <label class="form-label">Name</label>
    <input type="text" class="form-control" required @bind="user.NormalizedUserName" />

    <label class="form-label">Adress</label>
    <input type="text" class="form-control" required @bind="user.NormalizedEmail" />

    <input type="checkbox" class="form-check" required" /> Agree to terms and privacy policy
</form>
<input type="submit" @onclick="NavigateToConfirmation" value="Submit" />


@code {
    public bool purchaseComplete = false;
    public bool submited = false;
    ApplicationUser? user;
    AuthenticationState authenticationState;

    public async Task UpdateUser()
    {
        await wsh.UpdateUser(user);
    }

    public void NavigateToConfirmation() => navigationManager.NavigateTo("/confirmation");

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            authenticationState = await StateProvider.GetAuthenticationStateAsync();
            var stateUser = await userManager.GetUserAsync(authenticationState.User);
            user = await wsh.GetUserShopinglistInfo(stateUser);
        }
    }
}
