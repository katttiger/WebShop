@page "/checkout"
@using WebShop.Common;
@using WebShop.Data;
@using Microsoft.AspNetCore.Authorization;

@inject WebShopHandler wsh;
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider StateProvider;
@inject UserManager<ApplicationUser> userManager;
@rendermode InteractiveServer


<PageTitle>Checkout</PageTitle>
<WebshopHeader ShoppingListLength="@wsh.ShoppingCart.Count()"></WebshopHeader>
<div>
    <nav stype="--bs-breadcrumb-divider:'>';" aria-label="breadcrumb">
        <ol class="breadcrumb">
            <li class="breadcrumb-item" <a href="#">Home</a></li>
        </ol>
    </nav>
</div>

@foreach (var product in wsh.ShoppingCart)
{
    <table class="table">
        <thead>
            <tr>
                <th>#</th>
                <th>Picture</th>
                <th>Name</th>
                <th>Description</th>
                <th>Quantity</th>
                <th>Price/item</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>@(wsh.ShoppingCart.IndexOf(product) + 1)</td>
                <td><img src="@product.Url" width="180px" /></td>
                <td>@product.Name</td>
                <td>@product.Description</td>
                <td>1</td>
                <td>@product.Price</td>
            </tr>
        </tbody>
    </table>
}

<form class="form-control">
    @*TODO: If user exist, print adress and name automatically*@
    <label class="form-label">Name</label>
    <input type="text" class="form-control" required placeholder="@wsh.applicationUser.UserName" />

    <label class="form-label">Adress</label>
    <input type="text" class="form-control" required placeholder="@wsh.applicationUser.Email" />

    <input type="checkbox" class="form-check" required" /> Agree to terms and privacy policy
</form>
<input type="submit" @onclick="NavigateToConfirmation" value="Confirm" />

@code {
    public bool purchaseComplete = false;
    public bool submited = false;
    public List<Products> ShoppingList = new();

    ApplicationUser? user;
    AuthenticationState authenticationState;
    //Shoppingcart is reset to 0 when entering the checkout, even if wares have been added.
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Vi hämtar ut det nuvarande autentiseringsStatet som innehåller information om användare som är inloggar
            authenticationState = await StateProvider.GetAuthenticationStateAsync();
            // Med hjälp av authenticationState.User kan vi hämta ut vår faktiskt ApplicationUser
            var stateUser = await userManager.GetUserAsync(authenticationState.User);
            // Den kan vi sen använda för att hämta relaterad data från databasen
            user = await wsh.GetUserShopinglistInfo(stateUser);
            wsh.applicationUser = user;
        }
    }

    public void NavigateToConfirmation() => navigationManager.NavigateTo("/confirmation");
}
