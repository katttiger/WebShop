@page "/confirmation"
@using WebShop.Common;
@using WebShop.Data;


@rendermode InteractiveServer
@inject HttpClient HttpClient
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider StateProvider
@inject WebShopHandler wsh
@inject UserManager<ApplicationUser> userManager


<h3>Confirmation</h3>
<WebshopHeader
ShoppingListLength="@wsh.ShoppingCart.Count()"></WebshopHeader>

@if (purchaseConfirmed)
{
    <h2>Thank you for purchasing!</h2>
}
else
{
    @foreach (var product in wsh.ShoppingCart)
    {
        <table class="table">
            <thead>
                <tr>
                  <th>#</th>
                <th>Picture</th>
                <th>Name</th>
                <th>Description</th>
                <th>Quantity</th>
                <th>Price/item</th>
                </tr>
            </thead>

            <tbody>
                <tr>
                    <td>@(wsh.applicationUser.ShoppingCart.ShoppingList.IndexOf(product) + 1)</td
                    <td><img src="@product.Product.Url" width="180px" /></td>
                    <td>@product..Product.Name</td>
                    <td>@product.Product.Description</td>
                    <td>@product.Quantity</td>
                    <td>@(product.Product.Price*product.Quantity) @wsh.currency</td>
                </tr>
            </tbody>
        </table>
    }
    @if(user is not null)
    {
    <form class="form-control">
        <input class="form-control" type="text" placeholder="Name" disabled @bind="user.UserName"/>
        <input class="form-control" type="text" placeholder="Adress"  disabled @bind="user.Email" />
    </form>
    <input type="submit" @onclick="ConfirmPurchase" value="Submit" />
        
    }
 }

@code {
    public bool purchaseConfirmed = false;

    ApplicationUser? user;
    AuthenticationState authenticationState;

    public async Task ConfirmPurchase()
    {
        purchaseConfirmed = true;
        wsh.ConfirmPurchase();
        await Task.Delay(800);
        navigationManager.NavigateTo("/");
    }
  
    protected override async Task OnInitializedAsync()
    {
        authenticationState = await StateProvider.GetAuthenticationStateAsync();
        var stateUser = await userManager.GetUserAsync(authenticationState.User);
        if (stateUser is not null)
            user = await wsh.GetUserShopinglistInfo(stateUser);
        else
        {
             navigationManager.NavigateTo("/");
        }
        StateHasChanged();
    }
    
}
