@page "/oldconfirmation"
@using WebShop.Common;
@using WebShop.Data;

@rendermode InteractiveServer
@inject HttpClient HttpClient
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider StateProvider
@inject WebShopHandler wsh
@inject UserManager<ApplicationUser> userManager

<WebshopHeader ShoppingListLength="@wsh.ShoppingCart.Count()"></WebshopHeader>

@if (purchaseConfirmed)
{
    <h2>Thank you for purchasing!</h2>
}

@code {
    public bool purchaseConfirmed = true;

    ApplicationUser? user;
    AuthenticationState authenticationState;

    public double exchangeRate = 1;
    public string currency = "DKK";
    char currentCurrency = 'D';
    public async Task ExchangeAsync(char toCurrencyInput, char fromCurrencyInput)
    {
        HttpClient.DefaultRequestHeaders.Clear();
        string fromCurrency = string.Empty;
        string toCurrency = string.Empty;
        //$=>DKK
        if (toCurrencyInput == 'D' && currentCurrency == 'U')
        {
            fromCurrency = "USD";
            toCurrency = "DKK";
            currency = "DKK";
            currentCurrency = 'D';
        }
        //E=>DKK
        else if (toCurrencyInput == 'D' && currentCurrency == 'E')
        {
            fromCurrency = "EUR";
            toCurrency = "DKK";
            currency = "DKK";
            currentCurrency = 'D';
        }
        //DKK=>€
        else if (toCurrencyInput == 'E' && currentCurrency == 'D')
        {
            fromCurrency = "DKK";
            toCurrency = "EUR";
            currency = "€";
            currentCurrency = 'E';
        }
        //$=>€
        else if (toCurrencyInput == 'E' && currentCurrency == 'U')
        {
            fromCurrency = "USD";
            toCurrency = "EUR";
            currency = "€";
            currentCurrency = 'E';
        }
        //€=>$
        else if (toCurrencyInput == 'U' && currentCurrency == 'E')
        {
            fromCurrency = "EUR";
            toCurrency = "USD";
            currency = "$";
            currentCurrency = 'U';
        }
        //DKK=>$
        else if (toCurrencyInput == 'U' && currentCurrency == 'D')
        {
            fromCurrency = "DKK";
            toCurrency = "USD";
            currency = "$";
            currentCurrency = 'U';
        }
        else
        {
            if (currentCurrency == 'D')
            {
                fromCurrency = "DKK";
                toCurrency = "DKK";
                currency = currency;
            }
            else if (currentCurrency == 'E')
            {
                fromCurrency = "EUR";
                toCurrency = "EUR";
                currency = currency;
            }
            else
            {
                fromCurrency = "USD";
                toCurrency = "USD";
                currency = currency;
            }
        }
        HttpClient.DefaultRequestHeaders.Add("X-Api-Key", "oSZAPBiQWuTEFVLaXLzrkQ==SCNxLNPoxMs72JLy");
        var response = await HttpClient.GetFromJsonAsync<ResponseType>($"https://api.api-ninjas.com/v1/exchangerate?pair={fromCurrency}_{toCurrency}");
        exchangeRate = response.exchange_rate;
        wsh.currency = currency;
        HttpClient.DefaultRequestHeaders.Clear();
    }

    public async Task ConfirmPurchase()
    {
        wsh.ConfirmPurchase();
        await Task.Delay(800);
        navigationManager.NavigateTo("/");
    }

    protected override async Task OnInitializedAsync()
    {
        authenticationState = await StateProvider.GetAuthenticationStateAsync();
        var stateUser = await userManager.GetUserAsync(authenticationState.User);
        if (stateUser is not null)
            user = await wsh.GetUserShopinglistInfo(stateUser);
        else
            navigationManager.NavigateTo("/");
        await ConfirmPurchase();
        StateHasChanged();
    }

}
