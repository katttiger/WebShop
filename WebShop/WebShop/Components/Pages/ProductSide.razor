@using WebShop.Data
@page "/product"
@page "/product/{Id:int}"

@rendermode InteractiveServer
@inject HttpClient HttpClient
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider StateProvider
@inject WebShopHandler wsh
@inject UserManager<ApplicationUser> userManager

<PageTitle>ProductInfo</PageTitle>

<WebshopHeader ShoppingListLength="@wsh.ShoppingCart.Count()"
               OnNavigationToCashier="GoToCheckout"></WebshopHeader>

<div>
    <nav stype="--bs-breadcrumb-divider:'>';" aria-label="breadcrumb">
        <ol class="breadcrumb">
            <li class="breadcrumb-item" <a href="/">Home</a></li>
            <li class="breadcrumb-item active"> <a href="#">@Product.Name</a></li>
        </ol>
    </nav>
</div>
@*Input conversion here*@
<div class="btn-group-sm">
    <nav>
        <button class="btn btn-warning opacity-50" @onclick="()=>ExchangeAsync('E',currentCurrency)">&#8364;</button>
        <button class="btn btn-success opacity-50" @onclick="()=>ExchangeAsync('U', currentCurrency)">&#36;</button>
        <button class="btn btn-primary opacity-50" @onclick="()=>ExchangeAsync('D', currentCurrency)">DKK;</button>
    </nav>
</div>

<ProductInfoCard Product="Product"
                 Exhangerate="@exchangeRate"
                 Currency="@currency"
                 OnAddToCart="()=>AddToCart(Product.Id)"></ProductInfoCard>
<WebshopFooter></WebshopFooter>

@code {
    [Parameter]
    public int Id { get; set; }
    ApplicationUser? user;
    AuthenticationState authenticationState;

    public double exchangeRate = 1;
    public string currency = "DKK";
    char currentCurrency = 'D';

    public async Task ExchangeAsync(char toCurrencyInput, char fromCurrencyInput)
    {
        string fromCurrency = string.Empty;
        string toCurrency = string.Empty;

        //$=>DKK
        if (toCurrencyInput == 'D' && currentCurrency == 'U')
        {
            fromCurrency = "USD";
            toCurrency = "DKK";
            currency = "DKK";
        }
        //E=>DKK
        else if (toCurrencyInput == 'D' && currentCurrency == 'E')
        {
            fromCurrency = "EUR";
            toCurrency = "DKK";
            currency = "DKK";
        }

        //DKK=>€
        else if (toCurrencyInput == 'E' && currentCurrency == 'D')
        {
            fromCurrency = "DKK";
            toCurrency = "EUR";
            currency = "€";
        }
        //$=>€
        else if (toCurrencyInput == 'E' && currentCurrency == 'U')
        {
            fromCurrency = "USD";
            toCurrency = "EUR";
            currency = "€";
        }

        //€=>$
        else if (toCurrencyInput == 'U' && currentCurrency == 'E')
        {
            fromCurrency = "EUR";
            toCurrency = "USD";
            currency = "$";
        }
        //DKK=>$
        else if (toCurrencyInput == 'U' && currentCurrency == 'D')
        {
            fromCurrency = "DKK";
            toCurrency = "USD";
            currency = "$";
        }

        HttpClient.DefaultRequestHeaders.Clear();
        HttpClient.DefaultRequestHeaders.Add("X-Api-Key", "oSZAPBiQWuTEFVLaXLzrkQ==SCNxLNPoxMs72JLy");
        var response = await HttpClient.GetFromJsonAsync<ResponseType>($"https://api.api-ninjas.com/v1/exchangerate?pair={fromCurrency}_{toCurrency}");
        exchangeRate = response.exchange_rate;

        foreach (var product in wsh.ProductList)
        {
            product.Price = product.Price * exchangeRate;
        }
    }

    bool error = false;
    public string errorMessage = string.Empty;
    public string NotFound { get; set; } = string.Empty;
    public Products Product = new();

    public void GoToCheckout() => navigationManager.NavigateTo("/checkout");

    public void AddToCart(int id)
    {
        wsh.AddToCart(id, user);
    }

    protected override void OnInitialized()
    {
        Product = wsh.GetProductsById(Id);
    }

    protected override async Task OnInitializedAsync()
    {
        authenticationState = await StateProvider.GetAuthenticationStateAsync();
        var stateUser = await userManager.GetUserAsync(authenticationState.User);
        if (stateUser is not null)
            user = await wsh.GetUserShopinglistInfo(stateUser);
        else
        {
            navigationManager.NavigateTo("/");
        }
        StateHasChanged();
    }
}

